:namespace API
    NL←⎕UCS 10
    ⎕ml←1
    ⎕io←1
    Timeout←180 ⍝ seconds before we consider a job to have timedout
    DEBUG←⎕se.SALTUtils.DEBUG⍝×´0   ⍝ only allow debugging if we're in UCMD-DEBUG mode
    If←/⍨   ⍝  AB's father

    ∇ (R log)←APLVersions arg;k;i;keys;int;exe;bak;cnt;file;json;old;doc;platform;fld;cJSON;z1;z2;t;old∆;k2;lglv;hlp;args;res;updated
⍝:: Reports the current list of local interpreters (or updates it with the right modifieres set)
⍝?:
⍝?: ]APLVersions
⍝?: Without arguments, prints a list of local interpreters (according to interpreters.json5)
⍝?: * ]APLVersions -update:   rebuild list
⍝?: * ]APLVersions <filter>: use the "version filtering DSL" to enable or disable selected interpreters.
⍝?:                          as this has a "global effect", it should be used with care only tp disable interpreters
⍝?:                          that you are sure you don't want to use with CITA.
⍝?:  interpreters.json is located in different folders, depending on the OS. Running the command will show the location of the file.
⍝??: APLVersions: The <version filtering DSL>
⍝??: [mode][[version[s]]|/][edition][bits]
⍝??: [mode] is optional, default is + (select). Alternative values: ~ (=un-select, disable)
⍝??: [version] is any number, optionally with decimals and selects a version-number. Using syntax from-to you may also specify a range of versions
⍝??:           if version(s) is elided, a / must be given to indicate missing first element. (This allows us to recognize "/32" as a bitness-selector)
⍝??: [edition] ∊uUcC or _: Unicode, Class or "_" for both
⍝??: [bits]    is 32 or 64 or can be elided to select both
⍝??: each of the three elements can be elided, but at least one must be given for a sensible selection obviously...
⍝UParse: 1S -update
⍝AParse: 1S -update -ucmd=0 -loglevel∊0123 -compact= 1 2
⍝A?: This describes the syntax for calls through the API-Interface.
⍝A?: loglevel provides a possibility to select the desired level of detail for the messages in the log.
⍝A?: the level of detail increases as numbers increase in value:
⍝A?: 0 - no logging at all
⍝A?: 1 - simple msg about the name of the file that was created or updated
⍝A?: 2 - report new or disabled interpreters
⍝A?: 3 - everything
⍝A?:
⍝A?: Additionally, the API-Call can use the option "-compact" to select result:
⍝A?: -compact=1: generate two-row report of enabled & disabled APL-Interpreters
⍝A?: -compact=2: two-element vector with ids of enabled & disabled interpreters
     
⍝ the "standard"-header for the API-Functions takes care of providing help when the fn is called directly
     
      _InitUCMDs  ⍝ yeah, this is ambigous - but the API-fns also rely on ##.Home being set up. May find a better way to name or address this...
      :If ''=⍥⎕DR arg                              ⍝ if arg is char,
          arg←arg{~∨/⍵⍷⎕C ⍺:⍺,' ',⍵ ⋄ ⍺}'-ucmd=0'  ⍝ this is an API-Call - so be sure to add the -ucmd=0-modifier if we don't see it
          hlp←∨/('-?'⍷⍕arg)                        ⍝ remember if user asked for help
          args←##._Parse arg
          :If hlp                                   ⍝ if he asked for help
              R←0                                   ⍝ yes, this was successful!
              log←args                              ⍝ return it (Parse will have put it into its result!)
              →0                                    ⍝ and exit
          :EndIf
      :Else
          args←arg
      :EndIf
     
      int←⍬
      cJSON←⎕JSON⍠'Compact' 0
      R←0
      log←''
      :If ⎕NEXISTS file←_FileWithListOfInterpreters
          log←⊂'Using list of interpreters from file "',file,'"'
          old∆←⎕JSON ⎕JSON old←(⎕JSON⍠'Dialect' 'JSON5')1⊃⎕NGET file
          :If 0=0 args.Switch'update'
              res←FilterAPLVersions((args._1≢0)/args._1),' -get=V'
              :If updated←args._1≢0 ⍝ if DSL was given, process it
                  Disable←{⍝ ⍺=interpreters,  ⍵[1] ids to handle, ⍵[2]=new value
                      i←⍸⍺.id∊int←1⊃⍵
                      ⍺{16::NOP←⍬ ⋄ ⍺[i].disabled←⍵[2]}⍵  ⍝ avoid NONCE ERROR if i=⍳0
                      z←~int∊⍺.id
                      ∨/z:⎕←'Version(s) ',(¯2↓∊'"',¨int,¨⊂'", '),' not found!'
                  }
                  :If 0≢t←2⊃res
                      old Disable t(∊'"Disabled with ""]APLVersions -disable"" on "Dddd, DDoo Mmmm YYYY; hh:mm:ss'(1200⌶)1 ⎕DT⊂⎕TS)
                  :EndIf
                  :If 0≢t←1⊃res
                      old Disable t''
                  :EndIf
              :EndIf
              k←↑7↑¨({6::0 ⋄ 'doc'≢⍵.id:0=≢⍵.disabled ⋄ 0}¨old)/old.id
              k2←↑7↑¨({6::1 ⋄ 'doc'≢⍵.id:0<≢⍵.disabled ⋄ 0}¨old)/old.id
              :If 1=0 args.Switch'compact'
                  log,←⊂'enabled : ',¯2↓,(k,','),' '
                  log,←⊂'disabled: ',¯2↓,(k2,','),' '
              :ElseIf 2=0 args.Switch'compact'
                 ⍝ compact=2: return two vectors of vtvs with enabled/disabled interpreters
                  log←↓¨k k2
              :Else
                  log,←⊂'enabled   disabled'
                  log,←⊂'-------   --------'
                  log,←↓k{a←⍺,' ' ⋄ a,⍥{(a⌈⍥≢w)↑⍵}⍵}w←' ',' ',k2
              :EndIf
              :If 1=0 args.Switch'ucmd'
                  R←⍬     ⍝ indicator that we do not want indicator for status of R
              :EndIf
              :If updated
                  (⊂cJSON old)⎕NPUT file 1
                    ⍝log,←⊂'Updated file "',file,'"'
              :EndIf
              →End
          :EndIf
      :ElseIf 1≢0 args.Switch'update'
          log←⊂'No list of interpreters found. File ',file,' does not exist.'
          →End
      :EndIf
     
      lglv←2 args.Switch'loglevel'
     
      :Select platform
     
      :Case 'Win'
          keys←##.WinReg.GetAllSubKeyNames dyalog←'HKEY_CURRENT_USER\SOFTWARE\Dyalog'
          :For k :In keys
              :If (12↑k)≡'Dyalog APL/W'  ⍝ is it an interpreter
                  exe←(##.WinReg.GetString dyalog,'\',k,'\Dyalog'){⍺,((~∨/'\/'=¯1↑⍺)/'\'),⍵}'dyalog.exe'
                  :If ⎕NEXISTS exe
                      i←⎕NS'' ⍝ collect data in this ns
                      i.exe←∊1 ⎕NPARTS exe
                      i.Bits←(32 64)[1+'-64'≡3↑12↓k]
                      i.Edition←'CU'[1+∨/'Unicode'⍷k]
                      i.Version←3⊃2⊃' '⎕VFI k
                      i.id←i.((⍕Version×10),Edition,⍕Bits)
                      int,←i
                  :ElseIf lglv>1
                      log,←⊂'Registry key "',k,'" was not considered because "',exe,'" was not found!'
                  :EndIf
              :EndIf
          :EndFor
      :Case 'Mac'
          :For fld :In '/Applications/Dyalog*' '/Dyalog/Dyalog*'
              :For k :In ⊃0(⎕NINFO⍠1)
                  exe←k,'/Contents/Resources/Dyalog/mapl'
                  :If ⎕NEXISTS exe
                      i←⎕NS'' ⍝ collect data in this ns
                      i.exe←∊1 ⎕NPARTS exe
                      i.Bits←64
                      i.Edition←'U'
                      i.Version←2⊃2⊃'-'⎕VFI ¯4↓k
                      i.id←i.((⍕Version×10),Edition,⍕Bits)
                      int,←i
                  :ElseIf lglv>1
                      log,←⊂'Folder "',k,'" was excluded because it did not contain expected "',exe,'"'
                  :EndIf
              :EndFor
          :EndFor
      :Case 'Lin'
          :For exe :In ⊃0(⎕NINFO⍠'Recurse' 1)'/opt/mdyalog/mapl'
              :If ⎕NEXISTS exe
                  i←⎕NS'' ⍝ collect data in this ns
                  i.exe←∊1 ⎕NPARTS exe
                  i.Bits←64
                  i.Edition←'CU'[1+∨/'unicode'⍷exe]
                  i.Version←4⊃2⊃'/'⎕VFI exe
                  i.id←i.((⍕Version×10),Edition,⍕Bits)
                  int,←i
              :ElseIf lglv>1
                  log,←⊂'Folder "',k,'" was excluded because it did not contain expected "',exe,'"'
              :EndIf
          :EndFor
     
      :EndSelect
     
     
     
      :If 0<≢int
          doc←⎕NS''
          doc.id←'doc'
          doc._←⊂'This file is created, used and updated by CITA (Continous Integration & Testing in APL)         '
          doc._,←⊂'------------------------------------------------------------------------------------------------'
          doc._,←⊂'It contains the complete inventory of locally installed interpreters that might be used in tests'
          doc._,←⊂'when ExecuteLocalTests is called with the ''a''-Flag.                                             '
          doc._,←⊂'It is possible to indicate non-availability for tests of individual interpreters by setting     '
          doc._,←⊂'''disabled'' to a non-empty string.                                                               '
          doc._,←⊂'The ''id''-field is used to identify interpreters, while ''Bits'' and ''Edition'' describe the        '
          doc._,←⊂'respective characteristics of an interpreter.                                                   '
          doc._,←⊂'If any interpreter in this list should not be found again on a re-scan, its entry will get      '
          doc._,←⊂'a value in the ''disabled''-field, we never delete from this list! Newly installed interpreters   '
          doc._,←⊂'will be added (and will be enabled) automatically.                                              '
          doc.disabled←'Doc is read, not executed!'
     
          int←doc,int
     
          :If ⎕NEXISTS file
              :If old.id≡(⊂'doc'),int.id
              :AndIf old≡⍥{6::'' ⋄ ⍵.disabled}int  ⍝ also compare "disabled" - but avoid VALUE ERRORs
              :AndIf old≡⍥{6::'' ⋄ ⍵.exe}int
                  R←1
                  :If lglv>0 ⋄ log←⊂'No changes found - file "',file,'" was not replaced' ⋄ :EndIf
                  →End
              :Else
                  z1←({6::1 ⋄ 0=≢⍵.disabled}¨old)∧~old.id∊int.id
                  :If ∨/z1
                      (z1/old)⍎¨⊂'disabled←∊''"Disabled by interpreter-scan on "Dddd, DDoo Mmmm YYYY; hh:mm:ss''(1200⌶)1 ⎕DT ⊂⎕TS'
                      :If lglv>1
                          log,←⊂'Disabled ',(¯2↓∊'"',¨z1/old.id,¨⊂'", '),' which were not found'
                      :EndIf
                  :EndIf
                  z2←~int.id∊old.id
                  old←old,z2/int
                  :If ∨/z2
                      (z2/int)⍎¨⊂'Added←∊''"Added on "Dddd, DDoo Mmmm YYYY; hh:mm:ss''(1200⌶)1 ⎕DT ⊂⎕TS'
                      :If lglv>1
                          log,←⊂'Found and included new interpreters: ',¯2↓∊'"',¨z2/int.id,¨⊂'", '
                      :EndIf
                  :EndIf
                  :If 1∊z1,z2
                      old←old[⍋old.id]
                      old←old[(≢old){⍵,(⍳⍺)~⍵}old.id⍳⊂'doc']  ⍝ make sure doc stays on top
                      (⊂cJSON old)⎕NPUT file 1
                      :If lglv>0
                          log,←⊂'Updated "',file,'"'
                      :EndIf
                  :Else
                      log←'No changes found, "',file,'" is still current.'
                  :EndIf
              :EndIf
          :Else
              :If lglv>0
                  log,←⊂'Created "',file,'"'
              :EndIf
              (⊂cJSON int)⎕NPUT file
          :EndIf
          R←1
      :Else
          R←0
          log,←⊂'Nothing to do - no interpreters found! (How did you even execute this code?)'
      :EndIf
     End:
      :If 1=0 args.Switch'ucmd'
          R←⍬  ⍝ no need to show interpretation of rc when running UCMD
      :EndIf
    ∇

    ∇ {ns}←ExecuteLocalTest arg;fld;fl;loc;xin;rc;specs;R;step;specsObj;lg;cnt;list;showedIO;log;del;list2;v;xin∆;jlog;cfg;rcTest;interpreters;interpreter;t;int;resTab;plus;V;B;b;E;xinO;lint;dot;item;legend;symb;summary;exp
⍝:: Execute local tests
⍝?: Execute local tests
⍝?:
⍝?: ]ExecuteLocalTest <path>CITA.json[5] [-keep[∊RCcr]] -keeponfailure[∊RCcr] [-int[=180U64...]
⍝Parse:              1L                  -keep[∊]RCcr  -keeponfailure[∊]RCcr  -int[∊]"0123456789UCuc_/,.~-all"
⍝AParse:             1L                  -keep[∊]RCcr  -keeponfailure[∊]RCcr  -int[∊]"0123456789UCuc_/,.~-all" -workdir= -ucmd=0
⍝??: Execute local tests
⍝??:
⍝??: ]ExecuteLocalTest <path>CITA.json[5] [-keep[=C|R]] [-int=180U64...]
⍝??: <path>               location of CITA.json or CITA.json5 file OR http[s]-URL of a repo that has a CITA.json[5] file
⍝??: <folder>             tests are executed in an automatically created subfolder of TEMP/CITA_Test/yymmdd_hhmmss
⍝??:
⍝??: -int=ids             test against a subset of specified interpreters (comma-separated list of filters using the "version filtering DSL" of ]APLVersions)
⍝??:                      just use modifies w/o assigning value to run tests against all enabled interpreters
⍝??:
⍝??: -keep                which files should be keep after running the tests? (Default (if -keep is used w/o value) is "cr")
⍝??: -keep=c              code - the content of the folder/repository that was tested
⍝??: -keep=r              results - everything created while running tests (APLCOREs, log files of APL Session or DTest etc.)
⍝??:
⍝??: -keeponfailure       different keep-Settings i case tests fail. (Default (if -keeponfailure is given without values) is "cr"))
⍝??: -keeponfailure=cr    one or both of cr (casing is irrlevant) can be used with the same meaning as before with -keep
⍝??:
⍝??: Hint: the result's header gives a first quick indication of the result: straight line indicates success. dashed line means failure!
⍝??: ]APLVersions -??   ⍝ for a description of the "version filtering DSL"
⍝A?: The additional modifier "-workdir=<path>" can be used to select the base path for the tests.
⍝A?: Result is a namespace with these elements:
⍝A?: rc - return code
⍝A?:      ¯1=no test executed
⍝A?:       0=ok
⍝A?:       1=Test failed (Details in the Log)
⍝A?: Individual tests have returncodes as well (they are shown in "Log"). These come with a higher granularity,
⍝A? i.e. there's a better differentiation of the problems that occured:
⍝A?:       0= all ok
⍝A?:       1=test failed
⍝A?:       2=aborted because of Timeout
⍝A?:       3=no status file found
⍝A?:       4=invalid or non-existent file
⍝A?:       5=APL errors executing test
⍝A?:       6=executing test ended with APLCORE
⍝A?:       7=WS FULL
⍝A?:       8=Likely hit a Classic vs. Unicode-error (TRANSLATION ERROR etc.)
⍝A?: Log
⍝A?: testMat:  Matrix - Tests x Interpreters with single-letter result of corresponding test.
⍝A?:           First row/col has titles of tests and interpreters
     
      _InitUCMDs  ⍝ yeah, this is ambigous - but the API-fns rely on ##.Home being set up. May find a better way to name or address this...
      ns←⎕NS''
      res←¯1  ⍝ res=¯1 indicates no test were run!
      Log←''
      arg←##._Parse arg  ⍝ ensure its a parsed arg...
      fl←∊1 ⎕NPARTS(1 ''##._getArg 1 arg)  ⍝ fld=folder, fl=path to a CITA.json
      ('File or directory "',fl,'" not found')⎕SIGNAL(~⎕NEXISTS fl)/700
      fl,←(1=∊1 ⎕NINFO fl)/('\/'∊⍨⊢/fl)↓'/CITA.JSON*'  ⍝ we also accept folders as arg and append the filespec automatically (since we're expecting one specific file anyway)
     
      fld←1⊃⎕NPARTS fl
      :If ''≡xinO←''##._getArg'workdir'arg
          xinO←(739⌶0),,'</CITA_Test/>,ZI4,ZI2,ZI2,<_>,ZI2,ZI2,ZI2,</>'⎕FMT 1 6⍴⎕TS
          3 ⎕MKDIR xinO
      :EndIf
      :If ~⎕NEXISTS xinO
          ns.rc←¯1
          ns.Log←'Workdir "',xinO,'" not found!'
          →0
      :EndIf
     
      int←0  ⍝ count of interpreter
      interpreters←,0  ⍝ default (signals to APLProcess to use current)
      resTab←1 1⍴' '  ⍝ tests x Interpreters - a summary table of test-results  - first row/col contains ids/names
      showedIO←0   ⍝ when we display test-counts instead of ids, give info about IO=1 (this var ensures we're doing it once only!)
      rcTest←¯1  ⍝ ¯1: no tests executed
      :If (~⎕NEXISTS fl)∨'cita.json'≢9↑⎕C∊1↓⎕NPARTS fl
          ns.(rc Log)←700 'CITA.JSON[5] not found'
          →0
      :EndIf
      (rc specsObj lg)←_GetTestSpecs fl
      :If rc≠0
          ns.(rc Log)←701('Error processing specs in "',fl,'": ',⍕lg)
          →0
      :EndIf
      Log,←lg
      lint←''
      :If 0<≢lint←{1≡⍵:' ' ⋄ ⍵}''arg.Switch'int'
          lg←FilterAPLVersions{(∨\' '≠⍵)/⍵}lint,' -get=f'
          :If lint≢' '
              Log,←⊂'Filtered interpreters with "',lint,'"'
          :EndIf
          Log,←⊆'Testing against these active interpreters: ',¯2↓∊lg,¨⊂', '
          t←1⊃⎕NGET _FileWithListOfInterpreters
          interpreters←_FoldJson t
          interpreters←({6::1 ⋄ 'doc'≢⍵.id:0=≢⍵.disabled ⋄ 0}¨interpreters)/interpreters
          :If 0<≢lint
              interpreters←(interpreters.id∊lg)/interpreters
          :EndIf
      :EndIf
     ⍝ (⎕lc[1]+1)⎕stop 1⊃⎕si
      :For interpreter :In interpreters
     
          xin∆←xinO,{0::⍵ ⋄ interpreter.id,'_'}''
     
     
          :If interpreter≡0
              t←{(⍕+/10 1×2↑2⊃'.'⎕VFI 2⊃⍵),('CU'[1+80=⎕DR' ']),(1+'64'≡¯2↑1⊃⍵)⊃'32' '64'}'.'⎕WG'aplversion'
          :Else
              t←interpreter.id
              →NextInt If~⎕NEXISTS interpreter.exe ⍝ make sure interpreter does exist...
              :If 2=interpreter.⎕NC'disabled'
              :AndIf 0<≢interpreter.disabled
                  →NextInt
              :EndIf
          :EndIf
          int+←1
          resTab←resTab,⊂''
          resTab[1;1+int]←⊂t
          cnt←0
          :If interpreters≢,0
              Log,←⊂'Interpreter ',interpreter.id
          :EndIf
          :For specs :In specsObj
              cnt+←1
              :If (cnt+1)>≢resTab ⋄ resTab←resTab⍪⊂'' ⋄ resTab[cnt+1;1]←⊂specs.id ⋄ :EndIf
              :If 2=specs.⎕NC'disabled'
              :AndIf 0<≢specs.disabled
                  resTab[cnt+1;int+1]←'~'
                  :Continue
              :EndIf
            ⍝   :If int=1 ⋄ resTab←resTab⍪⊂'' ⋄ resTab[cnt+1;1]←⊂specs.id ⋄ :EndIf
           ⍝ test if this apl qualifies...
              resTab[cnt+1;int+1]←'~'  ⍝ we assume it doesn't - this will be overridden later if it does
              :If 2=specs.⎕NC'dyalogversions'
                  :If 0<≢v←specs.dyalogversions
                      :If interpreter≡0
                          V←+/1 0.1×2↑2⊃'.'⎕VFI 2⊃'.'⎕WG'aplversion'  ⍝ current version
                      :Else
                          V←interpreter.version
                      :EndIf
     
                      plus←0  ⍝ did we see a +sign?
                      :If (⎕DR' ')=⎕DR v  ⍝ , separated list or a single version, possibly with "+
                          v←','(≠⊆⊢)v
                          (v plus dot)←↓⍉↑{(p d)←'+.'∊⍵ ⋄ (⊃2⊃⎕VFI ⍵~'+'),p,d}¨v
                      :Else
                          (v plus dot)←↓⍉↑{' '≠⍥⎕DR ⍵:⍵,0 0 ⋄ (p d)←'+.'∊⍵ ⋄ (⊃2⊃⎕VFI ⍵~'+'),p,d}¨,v
                      :EndIf
                      :If ~∨/(V∊v),(plus∧v<V),(dot∧V∊⍥⌊v)
                          :If interpreter≡0
                              Log,←⊂'Current interpreter (v=',(⍕V),') rejected by test which selected "',(⍕specs.dyalogversions),'"'
                          :Else
                              Log←(¯1↓Log),⊂'Interpreter ',interpreter.id,'(v=',(⍕V),') rejected by test which selected "',(⍕specs.dyalogversions),'"'
                          :EndIf
                          →EndForSpec
                      :EndIf
                  :EndIf
              :EndIf
              :If 2=specs.⎕NC'bits'
                  :If interpreter≡0
                      B←{⍵:64 ⋄ 32}∨/'64'⍷1⊃'.'⎕WG'APLVersion'
                  :Else
                      B←interpreter.bits
                  :EndIf
                  :If ~B∊specs.bits
                      :If interpreter≡0
                          Log,←⊂'Current interpreter (bits=',(⍕B),') rejected by test which selected "',(⍕specs.bits),'"'
                      :Else
                          Log,←⊂'Interpreter ',interpreter.id,' rejected by test which selected "',(⍕specs.bits),'"'
                      :EndIf
                      →EndForSpec
                  :EndIf
              :EndIf
     
              :If 2=specs.⎕NC'edition'
                  :If interpreter=0
                      E←(1+80=⎕DR' ')⊃'CU'
                  :Else
                      E←interpreter.edition
                  :EndIf
                  :If ~E∊specs.edition
                      :If interpreter≡0
                          Log,←⊂'Current interpreter (edition==',(⍕E),') rejected by test which selected "',(⍕specs.edition),'"'
                      :Else
                          Log,←⊂'Interpreter ',interpreter.id,' rejected by test which selected "',(⍕specs.edition),'"'
                      :EndIf
                      →EndForSpec
                  :EndIf
              :EndIf
              resTab[cnt+1;int+1]←' '
     
              log←''
              xin←xin∆,(⍕specs.id),'/'
              :Trap (~DEBUG)/0
                  ⎕MKDIR xin
              :Else
                  xin←xin∆,(⍕cnt),'/'
                  log,←⊂'The jobid "',specs.id,'" caused an error when attempting to create a folder with that name.'
                  :Trap (~DEBUG)/0
                      ⎕MKDIR xin
                      log,←⊂'Solved that using counter (',(⍕cnt),') instead.'
                  :Else
                      log,←⊂'** Attempt to use counter (',(⍕cnt),') failed as well! Giving up.' ⋄ →EndStep
                  :EndTrap
              :EndTrap
     
              :If 0≠xin _CopyFolder fld
                  (res log)←703 'Problem copying files into workdir-folder'
                  →EndStep
              :EndIf
     
⍝ remember files we had before tests were executed...
              list←⊃0(⎕NINFO⍠('Recurse' 1)('Wildcard' 1))xin,'*'
     
              cfg←''
              :If 9=specs.⎕NC'config'
                  cfg←∊specs.config{⍵,'=',(⍕⍺⍎⍵),' '}¨specs.config.⎕NL ¯2
              :ElseIf 2=specs.⎕NC'config'
                  cfg←specs.config
              :EndIf
     
              R←0 ''
              :For step :In 'setup' 'test' 'teardown'
                  :If step≡'test'
                  :AndIf 0=specs.⎕NC step
                      R←4 'Missing entry for step "test"'
                  :Else
                      fl←specs⍎step
                      ⍝ ⎕← interpreter.id,' ',step
                      ⍝ (⎕lc[1]+1)⎕stop 1⊃⎕si
                      (rc jlog)←R←step _RunJob cfg specs interpreter
                      :If (⊂step)∊'setup' 'test'
                          rcTest←rc
                      :EndIf
                      :Select rc
                      :CaseList 0,(((⊂step)∊'setup' 'teardown')/4),(((⊂step)∊'test' 'teardown')/1) ⍝ we do nothing here, but may need to catch these cases...(and continue to the next step)
                      :Case 1   ⍝ ...whereas we will :Leave in all other cases...
                          R←rc(step,' (using "',fl,'") failed')
                          :Leave
                      :Case 2
                          R←rc(step,' (using "',fl,'")  did not end properly (Timeout Error)')
                          :Leave
                      :Case 3
                          R←rc('No statusfile (CITA.',step,'.[ok|err]) found after ',step,' ended')
                          :Leave
                      :Case 4
                          R←rc('Invalid or non-existent file "',fl,'" for step "',step,'"')
                          :Leave
                      :Case 5
                          R←rc('APL Error executing code from ',fl)
                      :Case 6
                          R←rc(step,' (using "',fl,'") ended with APLCORE!')
                      :Case 7
                          R←rc(step,' (using "',fl,'") ended with WS FULL!')
                      :Case 8
                          R←rc(step,' (using "',fl,'") probably had issue with Classic/Unicode-compatibility')
                      :EndSelect
                  :EndIf
              :EndFor
     
     EndStep:
              res←~(res∊0 ¯1)∧rcTest=0
              :If log≡'' ⋄ log←2⊃R ⋄ :EndIf
              Log,←⊂(3⍴'·~*'[0 ¯1⍳rcTest]),' ',('#',(⍕cnt),' ',((~showedIO)/' (⎕IO=1) '),{0<≢⍵:'"',⍵,'"'}specs.id),({⍵=0:': success ···' ⋄ ⍵=¯1:': not executed ~~~' ⋄ ': FAILURE (return code = ',(⍕⍵),') ***'}rcTest)
              showedIO←showedIO∨''≡⍥⎕DR specs.id
              :If 0<≢log,jlog
                  log←(⊆log),⊆jlog
                  :If 1=≢log
                      Log,←⊂'    Message: "',log,'"'
                  :Else
                      Log,←⊂'     Log:'
                      Log,←⊂∊{(z/'     '),⍵,((z←0<≢⍵)∧~∨/(⎕UCS 13 10)∊∊⍵)/⎕UCS 13}¨log
                  :EndIf
              :EndIf
              Log,←⊂''
     
              resTab[cnt+1;int+1]←'·-tniecw¢'[1+rcTest]
              list2←⊃0(⎕NINFO⍠('Recurse' 1)('Wildcard' 1))xin,'*'   ⍝ remember files we had before tests were executed...
              del←0⍴⊂''
     
              keep←arg.Switch'keep'
              :If rcTest≠0   ⍝ if test was successfull
                  keep←keep arg.Switch'keeponfailure'
              :EndIf
     
              :Select keep←{⍵[⍋⍵]}⎕C,keep
              :Case ,'r'
                  del←(list2∊list)/list2
              :CaseList ,¨'c' 0   ⍝ 0=DEFAULT, if keep specified
                  del←list
              :Case 'cr'(,1)      ⍝ 1=if "-keep" was used
                  del←⍬
              :Case ''            ⍝ -keep=  > delete everything, keep nothing!
                  del←list2
              :EndSelect
              :Trap DEBUG↓0
                  :For item :In ⌽del
                      :If 1=⊃1 ⎕NINFO item                  ⍝ if the items is a folder
                      :AndIf 0<≢⊃0(⎕NINFO⍠1)item,'/*'   ⍝ and there are still files in it
                          del←del~⊂item                  ⍝ do not attempt to delete it
                      :EndIf
                  :EndFor
                  1 ⎕NDELETE⌽del   ⍝ we try to delete files and folders individually
                  :If 0=≢keep
                      1 ⎕NDELETE xin
                  :EndIf
              :Else
                  log←⊂'Trapped error while clearing folder "',xin,'":',NL,⎕DMX.(OSError{⍵,2⌽(×≢⊃⍬⍴2⌽⍺)/'") ("',⊃⍬⍴2⌽⍺}Message{⍵,⍺,⍨': '/⍨×≢⍺}⊃⍬⍴DM,⊂'')
                  res←702
                  →EndForSpec
              :EndTrap
     EndForSpec:
          :EndFor
     NextInt:
      :EndFor
      :If interpreters≢,0    ⍝ if we run against multiple interpreters
      :AndIf rcTest≠¯1       ⍝ and tests were actually executed...
          Log,←↓⍕resTab
          Log,←'' 'Explanation of status indicator(s):'
          legend←''
          summary←⊃¯3↑Log
          :For symb exp :In ('·' 'success')('-' 'failure')('~' 'disabled')('t' 'timeout')('n' 'no status file found')('e' 'error')('c' 'APLCORE while running test')('w' 'WS FULL executin test')('¢' 'classic vs. unicode')
              :If symb∊summary
                  legend,←symb,'= ',exp,', '
              :EndIf
          :EndFor
          Log,←⊂¯2↓legend
      :EndIf
      :If 'r'∊keep
          Log,←⊂'Logs (including this log) can be found in ',xin∆,' and subfolders'
          (⊂Log)⎕NPUT xin∆,'CITA.log'
      :EndIf
      ns.Log←Log
      ns.rc←res
      ns.testMat←resTab
    ∇

    ∇ {ns}←TestRepo arg;fld;fl;loc;xin;rc;specs;R;step;specsObj;lg;cnt;list;showedIO;log;del;list2;v;xin∆;jlog;cfg;rcTest;interpreters;interpreter;t;int;resTab;plus;V;B;b;E;xinO;lint;dot;item;wd;args;url;sha;stages;cmdline_s;configfile;sdir;repo;platform;version;fapl;file_s;nlf;stage;file;job;cmdline;FixPath;rc1;aplv;log1;res;org;dcwd;home;hasCITA;lb;jenk;p1
⍝:: Test a remote GitHub-repository
⍝?: Test a remote GitHub-repository
⍝?:
⍝?: ]TestRepo [URL]|[org repo]    -branch=<id>  -tag=<id>   -commit=<sha> -pull∊0123456789 [-keep[∊RCcr]] -keeponfailure[∊RCcr] [-int[=180U64...]
⍝Parse:        1-2L               -branch=      -tag=       -commit=      -pull∊0123456789  -keep[∊]RCcr  -keeponfailure[∊]RCcr  -int[∊]"0123456789UCuc_/,.~-all"   -jenkins
⍝??: Test a remote repository
⍝??:
⍝?: ]TestRepo [URL]|[[org] repo]    -branch=<id> | -tag=<id> | -commit=<id> | -pull=<no of PR>
⍝??: <URL>                URL of a repo (can also be a URL of a commit or tag or branch or PR as taken from your browser)
⍝??: <org>                name of an organization (i.e. "dyalog" - which is also the default)
⍝??: <repo>               name of a repo (i.e. "CITA")
⍝??: Switch -jenkins indicates that we are supposed to create the Jenkinx jobs that execute the tests.
     
      _InitUCMDs  ⍝ yeah, this is ambigous - but the API-fns rely on ##.Home being set up. May find a better way to name or address this...
      ns←⎕NS''
      ns.Log←''
      ns.rc←¯1
      arg←##._Parse arg  ⍝ ensure its a parsed arg...
      fl←1 ''##._getArg 1 arg
      fl←{'http'≡4↑⎕C ⍵:⍵ ⋄ ∊1 ⎕NPARTS ⍵}fl  ⍝ fld=folder, fl=path to a CITA.json
      sha←''
      :If 0≡arg._2          ⍝ only one argument - the name of a dyalog-repository
          arg.(_2←_1)       ⍝ rearrange arguments
          arg._1←'dyalog'   ⍝ and assign default org
      :EndIf
     
      :If 'http'≡⎕C 4↑fl  ⍝ if a URL is given
          :If ~##.GitHub.HasCITA fl
              ns.rc←2
              ns.Log←'Repository ',fl,' does not contain CITA.json[5]'
              →0
          :EndIf
          fl←'/'(≠⊆⊢)(7+'s'=5⊃fl)↓fl   ⍝ elements of the URL
          :If 'github.com'≢⎕C 1⊃fl
              ns.rc←1
              ns.Log←'Domain ("',arg._1,'") of URL did not match "github.com"'
              →0
          :EndIf
          fl←1↓fl  ⍝ remove domain
          arg.(_1 _2)←fl[1 2]
          :If 2<≢fl                               ⍝ if there's more than
              :If 'commit'≡3⊃fl
                  arg.commit←4⊃fl
              :ElseIf 'tree'≡3⊃fl
                  arg.branch←4⊃fl
              :ElseIf 'pull'≡3⊃fl
                  :If 4≤≢fl
                  :AndIf ∧/(4⊃fl)∊⎕D
                      arg.pull←4⊃fl
                      url←'https://api.github.com/repos/',arg._1,'/',arg._2,'/pulls/',⍕arg.pull
                      R←'head.sha'##.GitHub.GetPagedResults url
                      sha←2⊃,R
                  :Else
                      ns.rc←1
                      ns.Log←'Could not identify PR'
                      →0
                  :EndIf
              :ElseIf 5=≢fl
              :AndIf 'tag'≡4⊃fl
                  arg.tag←5⊃fl
              :EndIf
          :EndIf
      :Else
          hasCITA←0
          :If arg.pull≢0
              url←'https://api.github.com/repos/',arg._1,'/',arg._2,'/pulls/',⍕arg.pull
              hasCITA←##.GitHub.HasCITA url
          :EndIf
          :If ~hasCITA
          :AndIf ~##.GitHub.HasCITA arg.(_1 _2)
              ns.rc←2
              ns.Log←'Repository ',(∊arg.(_1'/',_2)),' does not contain CITA.json[5]'
              →0
          :EndIf
      :EndIf
     
     
⍝ create tempdir for stuff downloaded from repo
      :If arg.jenkins
        ⍝  (rc log)←⎕SE.CITA.JenkinsConnection.Run''
        ⍝   ns.Log←log
        ⍝   ns.rc←rc
        ⍝   →0
          home←##.Home
     
          (org repo)←arg.(_1 _2)
          dcwd←2 ⎕NQ'.' 'GetEnvironment' 'DYALOGCITAWORKDIR'
          wd←dcwd,(~∨/'\/'∊⊢/dcwd)/'/'  ⍝ make sure path ends with '/'
          xinO←∊1 ⎕NPARTS wd,,('ZI4,ZI2,ZI2,<_>,ZI2,ZI2,ZI2,</',repo,'/>')⎕FMT 1 6⍴⎕TS   ⍝ create name for subfolder of our test
          :While ⎕NEXISTS xinO   ⍝ if that folder exists...
              xinO←{~'#'∊⍵:⍵,'#1' ⋄ i←⍵⍳'#' ⋄ ⍵[⍳i],⍕1+2⊃⎕VFI i↓⍵}xinO    ⍝ append a counter to make it unique...
          :End
          :Trap 0
              3 ⎕MKDIR xinO   ⍝ create it
          :Else
              ⎕←'Error while attempting to create subfolder for test: ',xinO
              ⎕←↑⎕DM
          :EndTrap
     
     
          3 ⎕MKDIR xinO,'CITA'
          :If 0≠⊃res←(xinO,'CITA/')##.GitHub.GetFilesFromSHA'Dyalog' 'CITA'
              ns.rc←4712 ⍝ TODO: proper error etc.
              ns.Log←'Download of CITA repo failed with',2⊃res
              →0
          :EndIf
     
⍝ get the last version of DyalogBuild.dyalog to ensure that we interpreters will use the latest version of ]DTest
          :If 0≠⊃res←(xinO,'CITA/SALT/spice/DyalogBuild.dyalog')##.GitHub.RetrieveFile'https://raw.githubusercontent.com/Dyalog/DBuildTest/master/DyalogBuild.dyalog'
              ns.rc←4712 ⍝ TODO: proper error etc.
              ns.Log←'Download of DBuildTest repo failed with',2⊃res
              →0
          :EndIf
     
          rc1←(xinO,repo)##.GitHub.GetFilesFromSHA org repo ⍝sha
          :If 0≠1⊃rc1
              ns.rc←4711  ⍝ TODO: better error
              ns.Log←'Error retrieving repo: ',∊1↓rc1
              →0
          :EndIf
⍝          rd←1⊃1(⎕NINFO⍠'Wildcard' 1)xinO,'*.*'
          (rc1 cfg log1)←_GetTestSpecs cita_file←∊(⊂xinO,repo,'/'){⎕NEXISTS r←⍺,⍵:r ⋄ ⍬}¨'CITA.json' 'CITA.json5'
          :If rc1≠0
              ns.Log←'Error retrieving test specs: ',log1
              ns.rc←4711   ⍝ TODO: assign proper error no and document it
              →0
          :EndIf
          aplv←⎕JSON 1⊃⎕NGET home,'dyalogversions.json'
          fapl←⊃∪/FilterAPLVersions¨(⊆cfg.dyalogversions),¨⊂' -list=',¯1↓∊aplv,¨','   ⍝ all versions we need to run on
     
          FixPath←{('u:/' 'U:/'⎕R'/devt/' '/devt/'⍠'Regex' 0)⍵}   ⍝ translate U: to /devt/
⍝ use a CONFIGFILE from the parent folder of DYALOGCITAWORKDIR
          cfg←⎕NS''
          cfg.Settings←⎕NS''
          (xinO,'CITA/client')(⎕NCOPY⍠'IfExists' 'Replace')'c:\git\CITA\client\RunCITA.dws '  ⍝ TEMP TODO: remove!!!
          cmdline←FixPath xinO,'CITA/client/RunCITA.dws'
          cmdline,←' ENABLE_CEF=0'
          cmdline,←' DYALOGCITASRCDIR=',FixPath xinO,'CITA'
          cmdline,←' DYALOGSTARTUPSE=',FixPath xinO,'CITA/StartupSession/'
          cmdline,←' COMMANDFOLDER=',FixPath xinO,'CITA/SALT/spice/'
          ⍝cmdline,← FixPath xinO,'CITA/StartupSession/'
          ⍝cmdline,←' "',(∊1 ⎕NPARTS ##.Home),'/client/RunCITA" '
⍝ run Jenkins job that execute commandline systems using given labels.  TODO: consider fapl here!
              ⍝jenk.Labels←↓'F4.1,< >'⎕FMT fapl  ⍝ TODO: unsure if Labels is best for this - or explicit DYALOGVERSIONS....?
     
          :If ⎕NEXISTS file←'./jobTemplate.xml'
⍝          :OrIf ⎕NEXISTS file←(1⊃⎕NPARTS 1⊃2 ⎕ATX 1⊃⎕SI),'jobTemplate.xml'
          :OrIf ⎕NEXISTS file←##.Home,'StartupSession/CITA/jobTemplate.xml'
              job←1⊃⎕NGET file
              stages←''
              :For platform :In 'mac' 'win' 'linux' ⍝ TODO: maybe CITA.json5 should specify the platforms?
                  file_s←(∊2↑⎕NPARTS file),'-stages-',platform,'.xml'  ⍝ the stage-file for that platform
                  :If ⎕NEXISTS file_s
                      (stage nlf)←(⎕NGET file_s 1)[1 3]
                      :For version :In fapl
                          sdir←xinO,platform,'_',version,'/'      ⍝ config & results for that stage
                          3 ⎕MKDIR sdir,repo
                          sdir ⎕NCOPY xinO,repo,'/'          ⍝ copy repository into that folder
     
                          ⍝cfg.Settings.RunUCMD←'ExecuteLocalTest ',FixPath sdir,repo,'/',∊1↓⎕NPARTS cita_file
                          configfile←sdir,'cita.dcfg'
                          (⊂(⎕JSON⍠'Compact' 0)cfg)⎕NPUT configfile
     
                          cmdline_s←cmdline,' USERCONFIGFILE=',FixPath configfile ⍝ passing that path w/o quotes, so there should never be blanks in it! Want to avoid hazzle with
                          cmdline_s,←' ExecuteLocalTest ',FixPath sdir,repo,'/',∊1↓⎕NPARTS cita_file
                          cmdline_s,←' CITA_Log=',FixPath sdir,'CITA.log'
                          cmdline_s←FixPath cmdline_s  ⍝ TODO: this may need to be improved with a config-setting for mappings
     
                          stages,←('%VERSION%' '%CMDLINE%'⎕R(⍕version)(cmdline_s)⍠'Regex' 0)stage
                      :EndFor
                  :EndIf
              :EndFor
          ⍝:End
     
              p1←⍸∊'%STAGES%'⍷job  ⍝ search string that we will replace with content of var "stages"
              lb←¯1+p1-⌈/⍸((⎕UCS job)∊10 13)∧(⍳≢job)<p1  ⍝ leading blanks of lines (so that we can maintain indent)
              job←((p1-1)↑job),(∊(⊂lb⍴' '),¨stages,¨⊂⎕UCS nlf),(p1+7)↓job
              file←xinO,∊1↓⎕NPARTS file
              (⊂job)⎕NPUT file
              jenk←⎕NEW ##.JenkinsConnection
              jenk.(Debug Cleanup)←1 0
              lb←⊃⌽'/'(≠⊆⊢)1⊃⎕NPARTS ¯1↓xinO
              (rc log)←file jenk.RunJob lb,'_',repo
              (⊂log)⎕NPUT(file,'.log')1  ⍝ save the log (temp)  TODO: remove!
     
              ns.Log,←'Executing job as defined in ',file
              ns.Log,←'BEGIN of Jenkins log',NL,log,NL,'END of Jenkins log',NL
              ns.rc←rc
              →0
          :Else
              ∘∘∘
          :EndIf
      :EndIf
     
      xinO←(739⌶0),,('</CITA_Test/>,ZI4,ZI2,ZI2,<_>,ZI2,ZI2,ZI2,</repo/',(arg._1,'-',arg._2),'/>')⎕FMT 1 6⍴⎕TS
      3 ⎕MKDIR xinO
     
      :If 0≢arg.tag
⍝ tags come as zipballs and need to be unzipped...
          :If 0=⊃r←(xinO,'t.zip')##.GitHub.RetrieveFile'https://api.github.com/repos/',arg._1,'/',arg._2,'/zipball/refs/tags/',arg.tag
              (2⊃r)##.GitHub.Unzip xinO
              z←0 1(⎕NINFO⍠'Wildcard' 1)xinO,'*'
              xinO←(1⍳⍨2⊃z)⊃1⊃z   ⍝ .zip contains all files inside a folder with unfathomable name - get that name and use it to examine that folder
          :Else
              ns.Log←'Error attempting to retrieve zip for tag "',rag.tag,'":'
              ns.Log,←≡r
              ns.rc←1
              →Exit
          :EndIf
      :Else
     
          :If 0≢arg.pull
              R2←(##.GitHub._gethc url←'https://api.github.com/repos/',arg._1,'/',arg._2,'/pulls/',arg.pull).Run
              :If R2.rc=0
              :AndIf R2.HttpStatus=200
                  arg.commit←(⎕JSON R2.Data).head.sha
              :Else
                  ns.rc←1
                  ns.Log←'Error retrieving PR from ',url
                  ns.Log,←⍕R2
                  →0
              :EndIf
          :ElseIf 0 0≡arg.(branch commit)
  ⍝ get id of last commit to the repo
              R2←'commit.author.date' 'sha' 'url'##.GitHub.ListCommits arg.(_1 _2)
              R21←R2 ##.GitHub.SortListBy'commit.author.date'    ⍝ sort by date
              sha←2⊃R2[2;]  ⍝ find last commit
              arg.commit←sha
          :EndIf
          :If 0≡arg.commit   ⍝ if commit was not selected
              b←'name' 'commit.url'##.GitHub.ListBranches arg.(_1 _2)
              :If 1=≡b
                  ns.rc←2
                  ns.Log←'Could not query repository "',arg.(_1,'/',_2),'"'
                  →Exit
              :EndIf
              :If (≢b)<bi←b[;1]⍳⊂arg.branch
                  ns.rc←3
                  ns.Log←'Could not find branch "',arg.branch,'" of repository "',arg.(_1,'/',_2),'"'
                  →Exit
              :EndIf
              sha←{(⌽∧\⌽⍵≠'/')/⍵}2⊃b[bi;]
              arg.commit←sha
          :EndIf
          r←xinO ##.GitHub.GetFilesFromSHA arg.(_1 _2 commit)
          :If 0=1⊃r       ⍝ if that ended ok
          :AndIf ×≢2⊃r     ⍝ and if we got any files from it
              wd←1⊃⎕NPARTS ¯1↓1⊃⎕NPARTS ¯1↓xinO
              fl←⊃0(⎕NINFO⍠('Recurse' 2)('Wildcard' 1))xinO,'CITA.json*'
     
              args←{(0<≢⍵)/' -keep=',⍵}''arg.Switch'keep'
              args,←{(0<≢⍵)/' -keeponfailure=',⍵}''arg.Switch'keeponfailure'
              args,←{(0<≢⍵)/' -int',(⍵≢1)/'=',⍵}''arg.Switch'int'
              args,←' -ucmd=0 -workdir="',wd,'"'
              ns←ExecuteLocalTest(1⊃fl),args   ⍝ pass-through the result...
              (⎕JSON⍠'HighRank' 'Split')ns
          :EndIf
      :EndIf
     Exit:
      (⎕JSON⍠'HighRank' 'Split')ns
    ∇

    :section tools
    ∇ (R log)←step _RunJob cfg_specs_interpreter;cpu;dws;cmd;ext;proc;StatusFiles;ai3;log;specs;cfg;file;isDTest;Fullname;t;TestLog;log_file;exited
⍝ returncode: 0=ok
⍝             1=test failed
⍝             2=aborted because of Timeout
⍝             3=no status file found
⍝             4=invalid or non-existent file
⍝             5=APL errors executing test
⍝             6=executing test ended with APLCORE
⍝             7=WS FULL
⍝             8=Likely TRANSLATION ERROR
⍝ access global var "V" which has the APL-Version of the target-environment as a numeric value
⍝ access global var "E" which has the Edition of the target-environment (U|C)
     
      log←''
      dws←cmd←''  ⍝ Arguments for constructor of APLProcess
      R←0
      →(0=≢cfg_specs_interpreter)/EOF
      (cfg specs interpreter)←3↑⊆cfg_specs_interpreter
      file←specs{6::'' ⋄ ⍺⍎⍵}step
      →(0=≢file)/EOF
      isDTest←0   ⍝ do we have a ]DTest-Call?
     
      :If ~⎕NEXISTS xin,file
          R←4
          →EndJob
      :EndIf
     
    ⍝ step of Statusfiles to indicate APL Errors [1], failure [2] or success[3]
      StatusFiles←(⊂xin,'CITA.',⎕C step),¨'.err' '.fail' '.ok'
      1 ⎕NDELETE¨StatusFiles  ⍝ make sure there are no old statusfiles around...
     
      ⍝...and explicitely set a log_file for each step (to be stored in workdir-folder):
      cfg,←' LOG_FILE="',(log_file←xin,'log_',step,'.dlf'),'" CITA_Log="',(∊2↑⎕NPARTS 1⊃StatusFiles),'"'
      cfg,←' APLCORENAME="',(aplcore←xin,'APLCORE_',step,'.'),'"'
      :If ⎕SE.SALTUtils.WIN   ⍝ if we're running under Windows
      ⍝ add those flags to better deal with possible exceptions...
          cfg,←' DYALOG_NOPOPUPS=1 PassExceptionsToOpSys=1'
      :EndIf
     
      cpu←⎕AI[3]
      Fullname←∊1 ⎕NPARTS xin,file
      :Select ext←⎕C 3⊃⎕NPARTS file
      :CaseList '.aplf' '.aplc' '.dyalog'
          TestLog←xin,'CITA_',(2⊃⎕NPARTS(-(ext≡''))↓Fullname),'.log'
          cmd←'CITATest="',Fullname,'" testlog="',TestLog,'"'
          dws←∊1 ⎕NPARTS ##.Home,'/client/RunCITA'
      :Case '.dws' ⋄ dws←Fullname
      :CaseList '' '.dyalogtest'
          R←4('.dyalogtest or folder-argument only valid for "test", not "',step,'"') ⋄ →(step≢'test')/EndJob
          :If ext≡'' ⋄ :AndIf 1≠1 ⎕NINFO Fullname ⋄ R←4 ⋄ →EndJob ⋄ :EndIf  ⍝ no extension, but does not refer to a folder
          TestLog←xin,'CITA_',(2⊃⎕NPARTS(-(ext≡''))↓Fullname),'.log'
          cmd←'CITATest="',Fullname,'"  testlog="',TestLog,'" ',specs{6::'' ⋄ 'dtestmods="',(⍺⍎⍵),'"'}'dtestmodifiers'
          dws←'"',∊1 ⎕NPARTS ##.Home,'/client/RunCITA"'
          isDTest←1
      :Else
          R←4('Did not recognize type of file "',file,'"') ⋄ →EndJob
      :EndSelect
      cmd,←' ',cfg
      exited←¯1
      proc←⎕NEW ##.APLProcess(dws cmd(interpreter{0::0 ⋄ ⍺⍎⍵}'exe')'' ''xin)
      ai3←⎕AI[3]
      :While ~proc.IsRunning proc.Proc.Id ⋄ ai3←⎕AI[3] ⋄ :EndWhile   ⍝ wait until process has started
      :Repeat
          ⎕DL 1⌊specs.secondstimeout×1000  ⍝ delay one second by default, but allow smaller (if someone challenges our timeouts...)
      :Until (ai31←⎕AI[3])≥⌊ai3+specs.secondstimeout×1000
      :OrIf exited←proc.HasExited
      WSFULL←0  ⍝ has the test hit a WS FULL?
      :If isDTest
          :If ⎕NEXISTS TestLog
              lg←1⊃⎕NGET TestLog
              :If ∨/'WS FULL'⍷lg
                  ''⎕NPUT((∊2↑⎕NPARTS 1⊃StatusFiles),'.wsfull'
                  WSFULL←1
              :ElseIf ∨/∊'SYNTAX ERROR' 'VALUE ERROR' 'DOMAIN ERROR'⍷¨⊂lg  ⍝ check mmost common errors...
                  ''⎕NPUT(1⊃StatusFiles)1
              :Else
                  ''⎕NPUT(2⊃StatusFiles)1
              :EndIf
          :Else
              ''⎕NPUT(3⊃StatusFiles)1
          :EndIf
      :EndIf
      :If 0=⎕NC'exited'
      :OrIf exited∊0 ¯1   ⍝ TIMEOUT
          log←'Process did not complete within ',(1⍕0.001×⎕AI[3]-ai3),' seconds and was killed (SecondsTimeout=',(⍕specs.secondstimeout),((specs.secondstimeout=Timeout)/' default value'),')'
          {}proc.Kill
          R←2 ⋄ →EndJob
      :EndIf
      :If ⎕NEXISTS(∊2↑⎕NPARTS 1⊃StatusFiles),'.wsfull' ⋄ R←7 ⋄ →EndJob ⋄ :EndIf
      :If WSFULL ⋄ R←7 ⋄ →EndJob ⋄ :EndIf
      :If ⎕NEXISTS 3⊃StatusFiles ⋄ R←0 ⋄ →EndJob ⋄ :EndIf
      :If ⎕NEXISTS 2⊃StatusFiles ⋄ log←'Test created logfile "',(2⊃StatusFiles),'" to indicate failed tests. More info might be found in it and in the APL Session-log "',log_file,'"' ⋄ R←1 ⋄ →EndJob ⋄ :EndIf
      :If ⎕NEXISTS 1⊃StatusFiles
          lg←1⊃⎕NGET 1⊃StatusFiles
          :If ∨/∊'TRANSLATON ERROR' '⎕UCS '⍷¨⊂lg
              log←'Test created logfile "',(1⊃StatusFiles),'" to indicate APL Errors while executing tests. String-matching of that log indicates we may have hit a TRANSLATION issue (Classic vs. Unicode)'
              R←8
          :Else
              log←'Test created logfile "',(1⊃StatusFiles),'" to indicate APL Errors while executing tests. More info might be found in it and in the APL Session-log "',log_file,'"'
              R←5
          :EndIf
          →EndJob
      :EndIf
      :If ⎕NEXISTS aplcore ⋄ ⋄ log←'Test led to an APLCORE: ',aplcore ⋄ R←6 ⋄ →EndJob ⋄ :EndIf
      R←3
     
     EndJob:
     EOF:
    ∇

    ∇ (rc rspec log)←_GetTestSpecs fl;cnt;specs;spec
      :Trap (~DEBUG)/rc←0
          log←''
          cnt←0
          rspec←⍬
     
          specs←_FoldJson 1⊃⎕NGET fl
          :If 2=specs.⎕NC'defaults'
              specs.(defaults{(⊂⍺ ⍵){(s t)←⍺ ⋄ 0=t.⎕NC ⍵:⍎'t.',⍵,'←s.',⍵}¨⍺.⎕NL-2}¨tests)    ⍝ Apply defaults to all tests
          :EndIf
          :If 0=specs.⎕NC'tests'  ⍝ optional element
              spec←⎕JSON specs
              'tests'specs.⎕NS''
              specs.tests←⎕JSON spec
          :EndIf
          ⍝ and make sure we have something in Test (will be validated later)
          :For spec :In specs.tests
            ⍝ set defaults for optional entries Setup/Teardown
              spec←(⊂'setup'){0=⍵.⎕NC ⍺:⍵⊣⍵⍎⍺,'←''''' ⋄ ⍵}¨spec
              spec←(⊂'teardown'){0=⍵.⎕NC ⍺:⍵⊣⍵⍎⍺,'←''''' ⋄ ⍵}¨spec
              spec.secondstimeout←spec{6::⍵ ⋄ ⍺.secondstimeout}Timeout
              cnt+←1
              spec.id←spec{6::⍵ ⋄ ⍺⍎'id'}'#',⍕cnt
              rspec,←spec
          :EndFor
          :If rspec≡⍬ ⋄ rc←705 ⋄ →0 ⋄ :EndIf
      :Else
          rc←701 ⋄ log←⊂'Error reading "',fl,'":',NL,⎕JSON ⎕DMX
      :EndTrap
    ∇



    ∇ R←to _CopyFolder from;hf;n;t;h
    ⍝ can't use ⎕NCOPY because that would also copy hidden files/directories - which would really hurt in the case of ".git"
    ⍝ R is returncode. Values: 0=ok
    ⍝                          1=problems copying file
    ⍝                          2=problems creating a folder
      R←0
      from←∊1 ⎕NPARTS from ⍝ normalize it
      hf←⍬
      :For (n t h) :In ↓[1]↑0 1 6(⎕NINFO⍠('Wildcard' 1)('Recurse' 1))(from,'/*')   ⍝ get name, type & hidden-status
          hf,←(h∧t=1)/⊂n ⍝ collect step of hidden directories
          :If h=1 ⋄ :Continue ⋄ :EndIf
          :If 0<≢hf ⋄ :AndIf 1∊hf{⍺≡(≢⍺)↑⍵}¨⊂n ⋄ :Continue ⋄ :EndIf ⍝ file from a hidden folder
          :If 1=t  ⍝ directory
              :If from≡(≢from)↑n
                  :Trap (~DEBUG)/0
                      3 ⎕MKDIR to,(≢from)↓n ⋄ :Continue
                  :Else
                      →0⊣R←2
                  :EndTrap
              :Else
                  ⎕←'Paranoia justified!'
                  ∘∘∘
              :EndIf
          :Else
              :If 1≠(to,(≢from)↓n)⎕NCOPY n
                  →0⊣R←1
              :EndIf
          :EndIf
      :EndFor
      R←0
    ∇

      _FoldJson←{
          0::⎕DMX.Message ⎕SIGNAL ⎕EN
          Apl←0 ⎕JSON⍠'Dialect' 'JSON5'⊢
          Json←1 ⎕JSON⍠'Compact' 0⊢
          FoldMembers←'^.*[^\\]":'⎕R{':',⍨Json ⎕C Apl ¯1↓⍵.Match}
          Apl FoldMembers Json Apl ⍵
      }

    _quote←{'"',(∊(⊂'\"')@{⍵='"'}⍵),'"'}
    _findLine←{{(+/∧\⍵=' ')↓⍵}¨l↓¨(((l←2+≢⍵)↑¨⍺)≡¨⊂'⍝',⍵,':')/⍺}


    ∇ file←_FileWithListOfInterpreters;docFld
      :Select platform←3↑1⊃'.'⎕WG'APLVersion'
      :Case 'Win'
          docFld←(2 ⎕NQ'.' 'GetEnvironment' 'USERPROFILE'),'/Documents/Dyalog APL Files'
      :Case 'Lin'
          docFld←'/home/',⎕AN,'/dyalog.files'
      :Case 'Mac'
          docFld←'/home/',⎕AN,'/dyalog.files'
      :EndSelect
      :If ~⎕NEXISTS docFld
          ⎕MKDIR docFld
      :EndIf
      file←∊1 ⎕NPARTS docFld,'/interpreters.json5'
    ∇
    :endsection



    :section UCMDs


    ∇ _InitUCMDs;fn;nr;j;parse;maxH;h;hd;r;patt;mode
      ##.Home←##._getHomeDir
      ##.UCMD._List←'[',NL
      ##.UCMD._Help←0 4⍴''   ⍝ [;1]=fn, [;2]=level, [;3]= regular hlp, [;4]=API-Help
      :For fn :In {('_'≠1⊃¨⍵)/⍵}##.API.⎕NL-3  ⍝ only for fns NOT starting with '_'
          :If (⎕NC⊂fn)≠3.1
              :Continue
          :EndIf
          nr←##.API.⎕NR fn
          j←'{'
          j,←'"Name":',_quote fn
          j,←',"Desc":',_quote desc←∊nr _findLine':'
             ⍝ Parse: we also support parseU/parseA to allow for different syntax when API-Fn is used via UCMD or API-Calls.
          :If 0=≢parse←∊nr _findLine'Parse'
              parse←∊nr _findLine'UParse'
          :EndIf
     
          ⍝ must scan help here (before we may branch out of processing the cmd) to be sure that we get the help!
          :For mode :In 'UA'   ⍝ UCMD-Help and API-Help
              patt←'⍝\s*'
              :If mode='A'
                  patt←patt,'A'    ⍝ the A is mandatory for API-Help
              :Else
                  patt,←'U?'       ⍝ but the U is optional
              :EndIf
              patt,←'(\?+):'
              maxH←⌈/0,∊(patt ⎕S{¯1↑⍵.Lengths})nr
              :For h :In ⍳maxH
                  ##.UCMD._Help⍪←(⊂fn),((h-1)+0.1×mode='A'),(mode≠'A')⌽(⊂''),[1.5]nr _findLine((mode='A')/'A'),h⍴'?'    ⍝ Help for APIs has level +.1! ;)
              :EndFor
          :EndFor
          :If 0∊(≢parse),≢desc  ⍝ if either description or parsing rules are undefined, ignore this fn!
              :Continue
          :EndIf
     
          j,←',"Parse":',_quote parse
          j,←',"Group":"CITA"'
          j,←'}'
          ##.UCMD._List,←j,','
     
     
     
          :Select 1 2⊃AT←##.API.⎕AT fn
          :Case 0 ⍝ niladic or not a fn
              hd←fn
          :Case 1 ⍝ monadic
              hd←fn,' rarg'
          :CaseList ¯2 2
              hd←'larg ',fn,' rarg'
          :EndSelect
          :Select 1⊃1⊃##.API.⎕AT fn
          :Case 1
              hd←'R←',hd
          :Case ¯1
              hd←'{R}←',hd
          :EndSelect
          r←'←'∊hd
          hd←(⊂hd),⊂':if 2=⎕nc''larg''⋄',(r/'R←'),'larg _getAPI ''',fn,''' rarg'
          hd,←⊂':else⋄',(r/'R←'),'_getAPI ''',fn,''' rarg'
          hd,←⊂':endif'
          :Trap 0 If DEBUG
              2 ##.⎕FIX hd
          :Else
          ⍝ return error building API fns...
              ∘∘∘
          :EndTrap
      :EndFor
      ##.UCMD.(⊃⌽_List)←']'
    ∇

    ∇ new←FilterAPLVersions arg;inst;l3;cmd;disable;z;range;objs;list;hlp;dsl;z1;z2
⍝:: Process ","-separated filters in dsl to build list of selected interpreters
⍝AParse: 1S -get∊xiovVf -ucmd=0 -list∊01234567890.,
⍝A?: This implements a DSL for selection of Dyalog interpreters:
⍝A?: [mode][[version[s]]|/][edition][bits]
⍝A?: if version(s) is elided, a / must be given to indicate missing first element. (This allows us to recognize "/32" as a bitness-selector)
⍝A?: mode is optional, default is + (select, enable). Alternative values: ~ (=un-select, disable)
⍝A?: [version] is any number, optionally with decimals and selects a version-number. Using syntax from-to you may also specify a range of versions.
⍝A?: [edition]∊uUcC or _: Unicode, Class or "_" for both
⍝A?: [bits] is 32 or 64 or can be elided to select both
⍝A?: each of the three elements can be elided, but at least one must be given for a sensible selection obviously...
⍝A?:
⍝A?: modifier -get= can be used to control the type of result:
⍝A?: x - return vtv with path(s) to exe
⍝A?: i =    -II-         id(s)
⍝A?: o =    -II-         objects (containing fields as exe, id etc. - from the file ]APLVersions uses )
⍝A?: v = return two vectors, each being a vtv itself with ids of enabled/disabled interpreters
⍝A?:     (as if applied on an empty list - but then selecting from available interpreters)
⍝A?: V= the same format & contest as "v", but the previous returns the effect of the executed DSL,
⍝A?:    whereas V reports on the current status. (to make that clear: consider 17+18 are enabled and
⍝A?:    you pass DSL +16-17.  "v" will only report 16+17 - because these were added. V reports 16,17,18
⍝A?:    because would be "current" when the DSL has been applied.) In other words:
⍝A?:    "v" starts with an empty list, "V" starts with the current list of interpreters (and then adds/removes)
⍝A?: f= return list of enabled interpreters filtered against the commands from the DSL.
⍝A?: Filters will be applied in the sequence they appear.
⍝A??: A dangerous gotcha is the fact that the DSL-Operations add or remove.
⍝A??: The expression "u" (or "+u") adds unicode-interpreters (with "V" to the current list, so it won't REMOVE classic from the list)
⍝A??: You'd need ~c to achieve that!
⍝A??: To query the list of installed v16-Interpreters, you can do "16 -v". But to get a list
⍝A??: of already enabled interpreters, you'd need more that just changing v into V, you'd also
⍝A??: have to disable unwanted interpreters: "16,~-15.99,~17- -V".
⍝A??: Switch "-list" can be used to provide a list of version numbers that will be filtered - no consideration of
⍝A??: bits or editions. (Primarily used for internal purposes)
     
      _InitUCMDs  ⍝ yeah, this is ambigous - but the API-fns als rely on ##.Home being set up. May find a better way to name or address this...
      :If ''=⍥⎕DR arg       ⍝ if arg is char,
          arg←arg{~∨/⍵⍷⎕C ⍺:⍺,' ',⍵ ⋄ ⍺}'-ucmd=0'  ⍝ this is an API-Call - so be sure to add the -ucmd=0-modifier if we don't see it
          hlp←∨/'-?'⍷⍕arg   ⍝ remember if user asked for help
          arg←##._Parse arg
          :If hlp            ⍝ if he asked for help
              new←arg        ⍝ return it (Parse will have put it into its result!)
              →0             ⍝ and exit
          :EndIf
      :EndIf
     
      dsl←##._getArg 1 arg
      :If 0<≢list←arg.Switch'list'
          list←,[1.5]','(≠⊆⊢)list
          l3←list,{⍬⍴2⊃⎕VFI ⍵}¨list
      :Else
          objs←⎕JSON 1⊃⎕NGET _FileWithListOfInterpreters
          objs←(objs.id≢¨⊂'doc')/objs
          list←objs.id
          l3←('(\d\d[\.?\d]?)([ |c|u])(\d{2})'⎕S'\1 \2 \3'⍠1)list
      ⍝ convert list into [;1]=id, [;2]=version, [;3]=bits, [;4]=edition
          l3←list,↑{({⍬⍴(2⊃⎕VFI 2↑⍵)+(2<≢⍵)×0.1×2⊃⎕VFI ¯1↑⍵}¨⍵[1 3]),⎕C 2⊃⍵}¨{' '(≠⊆⊢)⍵}¨l3
      :EndIf
      :If 'V'=arg.Switch'get'
          new←({6::1 ⋄ 0=≢⍵.disabled}¨objs)/objs.id   ⍝ start with current list and then apply changes if we're in V-mode!
      :Else
          new←⍬   ⍝ start with an empty list
      :EndIf
      :If 0≢dsl
          :For cmd :In ','(≠⊆⊢),dsl   ⍝ look at one instruction after the next
              disable←'~'=⊃cmd ⋄ cmd←(∨/'+~'=⊃cmd)↓cmd
              :If cmd≡⍥⎕C'all'
                  z←(≢l3)⍴1
              :Else
                  :If '/'≠⊃cmd
                      range←0 ¯1 99 0 0 ⍝ range[1]: yes, "-" was used, [2] is start and [3] is end of range, range [4 5]: was a '.' used in the version-spec 2&3
                      :If ∧/(2↑cmd)∊⎕D
                          z←∧\cmd∊⎕D  ⍝ just get the leading digits
                          range[2]←⍬⍴2⊃⎕VFI z/cmd
                          cmd←(~z)/cmd
                          :If 0<≢cmd
                          :AndIf range[4]←∨/z←∧\cmd∊'.',⎕D
                              range[2]+←{⍵<1:⍵ ⋄ ⍵×0.1}⍬⍴2⊃⎕VFI(('.'≠⊃cmd)⍴'.'),z/cmd
                              cmd←(~z)/cmd
                          :EndIf
                      :EndIf
                      range[1]←'-'=⊃cmd
                      :If '+'=⊃cmd ⍝ "+" after first version indicates "open range" (ending with 99)
                          cmd←1↓cmd
                          range[1]←1
                      :EndIf
                      cmd←range[1]↓cmd
                      :If 0<≢cmd
                      :AndIf ∨/z←∧\((≢cmd)↑1 1)∧cmd∊⎕D,'.'  ⍝ just get the leading digits
                          range[3]←⍬⍴(2⊃⎕VFI z/cmd)+⍬⍴0.1×{2⊃⎕VFI'.'~⍨(∧\⍵∊⎕D,'.')/⍵}'0',⍨(~z)/cmd
                          cmd←(~z)/cmd
                          :If 0<≢cmd
                          :AndIf range[5]←∨/z←∧\cmd∊'.',⎕D
                              range[3]+←{⍵<1:⍵ ⋄ ⍵×0.1}2⊃⎕VFI z/cmd
                              cmd←(~z)/cmd
                          :EndIf
                      :EndIf
                      range[2]←{⍵[2]:⍵[1] ⋄ ⌊⍵[1]}range[2 4]
                      range[3]←{⍵[2]:⍵[1] ⋄ 0.999+⌊⍵[1]}range[3 5]
                      :If range[1]  ⍝ if range was specified
                          z←l3[;2]{(⍵[1]≤⍺)∧(⍵[2]≥⍺)∨⍵[2]=¯1}1↓range
                      :ElseIf range[4] ⍝ if . was used in 2
                          z←(l3[;2])=range[2]  ⍝ version must match exactly
                      :ElseIf range[2]>0
                          z←(⌊l3[;2])=range[2]
                      :Else
                          ⎕EX'z'
                      :EndIf
                  :Else
                      cmd←1↓cmd
                  :EndIf
                  :If 2<¯1↑⍴l3   ⍝ if we know bits/edition (NOT working against -list, but using "real" specs)
                      :If ∨/'_uc'∊⎕C⊃cmd
                          :If (⎕C⊃cmd)∊'cu'
                              z←'z'{6::⍵ ⋄ ⍵∧⍎⍺}l3[;4]=⎕C⊃cmd
                          :Else
                              z←'z'{6::⍵ ⋄ ⍵∧⍎⍺}(≢l3)⍴1  ⍝ select all
                          :EndIf
                          cmd←1↓cmd
                      :EndIf
                      :If (⊂cmd)∊'32' '64'
                          z←'z'{6::⍵ ⋄ ⍵∧⍎⍺}l3[;3]∊2⊃⎕VFI cmd
                      :EndIf
                  :EndIf
              :EndIf
              :If 0=⎕NC'z'
                  :Continue
              :EndIf ⍝ nothing has been selected
              :If disable
                  new←new~z/l3[;1]
              :Else
                  new∪←z/l3[;1]
              :EndIf
          :EndFor
      :ElseIf 'f'=arg.Switch'get'
          new←objs.id
      :EndIf
      :If 0≢cmd←arg.Switch'get'
          z←objs.id∊new
          :Select ''⍴cmd
          :Case 'x'
              new←z/objs.exe
          :Case 'i'
              new←z/objs.id
          :Case 'o'
              new←z/objs
          :Case 'v'
              new←(z/objs.id)((~z)/objs.id)
          :Case 'V'
              z1←objs.id≢⊂'doc'
              z2←{6::1 ⋄ 0=≢⍵.disabled}¨objs
              ⍝new←((z1∧z2)/objs.id)((z1∧~z2)/objs.id)
              new←(new)(objs.id~new)
          :CaseList 'fF'
              z←(objs.id∊new)∧{6::1 ⋄ 0=≢⍵.disabled}¨objs
              new←z/objs.id
          :EndSelect
      :EndIf
     
    ∇
    :endsection

:endnamespace
