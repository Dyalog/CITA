:namespace API
    nl←⎕UCS 13

    Timeout←180 ⍝ seconds before we consider a job to have timedout

    ∇ {(res Log)}←ExecuteLocalTest arg;fld;fl;loc;xin;rc;specs;R;step;specsObj;lg;cnt;list;showedIO;log;del;list2;v;xin∆;jlog;cfg;rcTest;interpreters;interpreter;t;int;resTab;plus;V;B;b;E;xinO;If
⍝:: Execute local tests
⍝?: Execute local tests
⍝?:
⍝?: ]ExecuteLocalTest <path>CITA.json[5] -all [-workdir=<location> [-empty] [-cleanup[=O|N]] | [-cleanup[=N]]]
⍝Parse:               1L                 -all  -workdir=            -empty   -cleanup[∊]ON
⍝??: Execute local tests
⍝??:
⍝??: ]ExecuteLocalTest    <path>CITA.json[5] [-workdir=<location> [-empty] [-cleanup[=N|O]] | [-cleanup]]
⍝??:
⍝??: <path>               location of CITA.json or CITA.json5 file
⍝??:
⍝??: -all                 tests against ALL local versions of dyalog (as defined in %CITA_ListOfInterpreters%) - otherwise tests currently active interpreter
⍝??: -workdir=<location>  directory in which the tests should be executed (all files/folders found in <path> will be copied to <location>)
⍝??:
⍝??: -empty               delete all files from <location> before running tests
⍝??:
⍝??: -cleanup             files to delete after running tests:
⍝??: -cleanup=O           delete only Old files copied from <path> (keeps files resulting from tests)
⍝??: -cleanup=N           delete only New files created while running the tests (keeps files copied from <path>)
⍝??: -cleanup=ON          delete all files in <location> after running tests
⍝??:
      res←0 ⋄ Log←''
      If←{⍵:⍺ ⋄ ⍬}  ⍝ syntax sugar for →
      arg←##._Parse arg  ⍝ ensure its a parsed arg...
      fl←∊1 ⎕NPARTS(1 ''##._getArg 1 arg)  ⍝ fld=folder, fl=path to a CITA.json
      ('File or directory "',fl,'" not found')⎕SIGNAL(~⎕NEXISTS fl)/700
      fl,←(1=∊1 ⎕NINFO fl)/('\/'∊⍨⊢/fl)↓'/CITA.JSON'  ⍝ we also accept folders as arg and append the filespec automatically (since we're expecting one specific file anyway)
     
      fld←1⊃⎕NPARTS fl
      xinO←0(1⊃⎕NPARTS fl)##._getArg'workdir'arg
      xinO←∊1 ⎕NPARTS xinO
      xinO,←('/'≠⊢/xinO)/'/'
      :If ~⎕NEXISTS xinO
          (res Log)←702 'workdir does not exist'
          →0
      :EndIf
     
      :If xinO≢fld
          :If 0<≢list←⊃0(⎕NINFO⍠('Recurse' 1)('Wildcard' 1))xinO,'*'
              :If ~arg.Switch'empty'
                  (res Log)←702 'workdir is not an empty folder'
                  →0
              :Else
                  {}1 ⎕NDELETE⌽list  ⍝ transpose to be sure that we delete files before removing the subfolder containing them
              :EndIf
          :EndIf
      :EndIf
     
      int←0  ⍝ count of interpreter
      interpreters←,0  ⍝ default (signals to APLProcess to use current)
      resTab←1 1⍴0  ⍝ tests x Interpreters - a summary table of test-results  - first row/col contains ids/names
      :If (~⎕NEXISTS fl)∨'cita.json'≢9↑⎕C∊1↓⎕NPARTS fl ⋄ →0⊣(res Log)←700 'CITA.JSON[5] not found' ⋄ :EndIf
      (rc specsObj lg)←_GetTestSpecs fl
      :If rc≠0 ⋄ →0⊣(res Log)←701('Error processing specs in "',fl,'": ',⍕lg) ⋄ :EndIf
      Log,←lg
     
      :If arg.Switch'all'
      :AndIf 0<≢t←2 ⎕NQ'.' 'GetEnvironment' 'CITA_ListOfInterpreters'
      :AndIf 0<≢t←{0::'' ⋄ 1⊃⎕NGET ⍵}t
          interpreters←_FoldJson t
      :EndIf
      :For interpreter :In interpreters
          int+←1
          resTab←resTab,⊂''
     
          xin∆←xinO,(interpreters≢,0)/,'i',⍕int
     
     
          :If interpreter≡0
              ⎕←t←{(⍕+/10 1×2↑2⊃'.'⎕VFI 2⊃⍵),('CU'[1+80=⎕DR' ']),(1+'64'≡¯2↑1⊃⍵)⊃'32' '64'}'.'⎕WG'aplversion'
          :Else
              ⎕←t←interpreter.id
              →NextInt If~⎕NEXISTS interpreter.exe ⍝ make sure interpreter does exist...
              :If 2=interpreter.⎕NC'disabled'
              :AndIf 0<≢interpreter.diasbled
                  →NextInt
              :EndIf
          :EndIf
          resTab[1;1+int]←⊂t
          cnt←0
          showedIO←0
          :For specs :In specsObj
              cnt+←1
              :If int=1 ⋄ resTab←resTab⍪⊂'' ⋄ resTab[cnt+1;1]←⊂specs.id ⋄ :EndIf
              ⍞←specs.id,'...'
           ⍝ test if this apl qualifies...
              :If 0<≢v←specs.dyalogversions
                  :If interpreter≡0
                      V←+/1 0.1×2↑2⊃'.'⎕VFI 2⊃'.'⎕WG'aplversion'  ⍝ current version
                  :Else
                      V←interpreter.version
                  :EndIf
     
                  plus←0  ⍝ did we see a +sign?
                  :If (⎕DR' ')=⎕DR v  ⍝ , separated list or a single version, possibly with "+
                      v←','(≠⊆⊢)v
                      (v plus)←↓⍉↑{p←'+'∊⍵ ⋄ (⊃2⊃⎕VFI ⍵~'+'),p}¨v
                  :EndIf
                  →NextInt If~∨/(V∊v),(v<V)∧plus
              :EndIf
              :If 2=specs.⎕NC'bits'
                  :If interpreter≡0
                      B←{⍵:64 ⋄ 32}∨/'64'⍷1⊃'.'⎕WG'APLVersion'
                  :Else
                      B←interpreter.bits
                  :EndIf
                  →NextInt If~B∊specs.bits
              :EndIf
     
              :If 2=specs.⎕NC'edition'
                  :If interpreter=0
                      E←(1+80=⎕DR' ')⊃'CU'
                  :Else
                      E←interpreter.edition
                  :EndIf
                  →NextInt If~E∊specs.edition
              :EndIf
     
     
              log←''
              :If xin∆≢fld
                  xin←xin∆,(⍕specs.id),'/'
                  :Trap 0
                      ⎕MKDIR xin
                  :Else
                      xin←xin∆,(⍕cnt),'/'
                      log,←⊂'The jobid "',specs.id,'" caused an error when attempting to create a folder with that name.'
                      :Trap 0
                          ⎕MKDIR xin
                          log,←⊂'Solved that using counter (',(⍕cnt),') instead.'
                      :Else
                          log,←⊂'** Attempt to use counter (',(⍕cnt),') failed as well! Giving up.' ⋄ →EndStep
                      :EndTrap
                  :EndTrap
              :EndIf
     
⍝ remember files we had before tests were executed...
              list←⊃0(⎕NINFO⍠('Recurse' 1)('Wildcard' 1))xin,'*'
              :If xin≢fld
                  :If 0≠xin _CopyFolder fld
                      (res log)←703 'Problem copying files into workdir-folder'
                      →EndStep
                  :EndIf
              :EndIf
     
              cfg←''
              :If 9=specs.⎕NC'config'
                  cfg←∊specs.config{⍵,'=',(⍕⍺⍎⍵),' '}¨specs.config.⎕NL ¯2
              :ElseIf 2=specs.⎕NC'config'
                  cfg←specs.config
              :EndIf
     
              rcTest←¯1
              R←0 ''
              :For step :In 'setup' 'test' 'teardown'
                  ⍞←step,'...'
                  :If step≡'test'
                  :AndIf 0=specs.⎕NC step
                      R←4 'Missing entry for step "test"'
                  :Else
                      fl←specs⍎step
                      (rc jlog)←R←step _RunJob cfg specs interpreter
                      :If (⊂step)∊'setup' 'test'
                          rcTest←rc
                      :EndIf
                      :Select rc
                      :CaseList 0,(((⊂step)∊'setup' 'teardown')/4),(((⊂step)∊'test' 'teardown')/1) ⍝ we do nothing here, but may need to catch these cases...(and continue to the next step)
                      :Case 1
                          R←rc(step,' (using "',fl,'") failed')
                          :Leave
                      :Case 2
                          R←rc(step,' (using "',fl,'")  did not end properly (Timeout Error)')
                          :Leave
                      :Case 3
                          R←rc('No statusfile (CITA.',step,'.[ok|err]) found after ',step,' ended')
                          :Leave
                      :Case 4
                          R←rc('Invalid or non-existent file "',fl,'" for step "',step,'"')
                          :Leave
                      :EndSelect
                  :EndIf
              :EndFor
     
     EndStep:
              res←~(~res)∧rcTest=0
              :If log≡'' ⋄ log←2⊃R ⋄ :EndIf
              Log,←⊂(3⍴'·*'[1+rcTest≠0]),' ',('#',(⍕cnt),' ',((~showedIO)/' (⎕IO=1) '),{0<≢⍵:'"',⍵,'"'}specs.id),({⍵=0:': success ···' ⋄ ': FAILURE (return code = ',(⍕⍵),') ***'}rcTest)
              showedIO←showedIO∨''≡⍥⎕DR specs.id
              :If 0<≢log,jlog
                  log←(⊆log),⊆jlog
                  :If 1=≢log
                      Log,←⊂'    Message: "',log,'"'
                  :Else
                      Log,←⊂'     Log:'
                      Log,←⊂∊{(z/'     '),⍵,((z←0<≢⍵)∧~∨/(⎕UCS 13 10)∊∊⍵)/⎕UCS 13}¨log
                  :EndIf
              :EndIf
              Log,←⊂''
     
              resTab[cnt+1;int+1]←'·*'[1+rcTest≠0]
              list2←⊃0(⎕NINFO⍠('Recurse' 1)('Wildcard' 1))xin∆,'*'   ⍝ remember files we had before tests were executed...
              del←0⍴⊂''
     
              :Select v←arg.Switch'cleanup'
              :CaseList 'ON' 'NO'
                  :If fld≡xin∆
                      ⎕←'Use of modifier -cleanup=',v,' is not supported when -workdir was not given or the same as the source folder of CITA.json'
                  :Else
                      del←list2
                  :EndIf
              :Case 'N'
                  del←(~list2∊list)/list2
              :Case 1
                  :If fld≢xin∆
                      ⎕←'Use of modifier -cleanup without assignment of a value is not supported when -in is used '
                  :Else
                      del←(~list2∊list)/list2
                  :EndIf
              :Case 'O'
                  del←list
              :EndSelect
              1 ⎕NDELETE⌽del
          :EndFor
     NextInt:
      :EndFor
      ⎕SE.Dyalog.Utils.display resTab
    ∇



    :section tools
    ∇ (R log)←step _RunJob cfg_specs_interpreter;cpu;dws;cmd;ext;proc;StatusFiles;ai3;log;specs;cfg;file;isDTest;Fullname;t;TestLog;log_file;exited;If
⍝ returncode: 0=ok
⍝             1=test failed
⍝             2=aborted because of Timeout
⍝             3=no status file found
⍝             4=invalid or non-existent file
⍝             5=environment not appropriate (i.e. 17.1 can not use LOAD= to deal with .aplf)
⍝ access global var "V" which has the APL-Version of the target-environment as a numeric value
⍝ access global var "E" which has the Edition of the target-environment (U|C)
     
      log←''
      If←{⍵:⍺ ⋄ ⍬}  ⍝ syntax sugar for →
      dws←cmd←''  ⍝ Arguments for constructor of APLProcess
      R←0
      →(0=≢cfg_specs_interpreter)/EOF
      (cfg specs interpreter)←3↑⊆cfg_specs_interpreter
      file←specs{6::'' ⋄ ⍺⍎⍵}step
      →(0=≢file)/EOF
      isDTest←0   ⍝ do we have a ]DTest-Call?
     
      :If ~⎕NEXISTS xin,file ⋄ R←4 ⋄ →EndJob ⋄ :EndIf
     
    ⍝ step of Statusfiles to indicate failure [1] or success[2]
      StatusFiles←(⊂xin,'CITA.',⎕C step),¨'.err' '.ok'
      1 ⎕NDELETE¨StatusFiles  ⍝ make sure there are no old statusfiles around...
     
      ⍝...and explicitely set a log_file for each step (to be stored in workdir-folder):
      cfg,←' LOG_FILE="',(xin,'log_',step,'.dlf'),'" CITA_Log="',(∊2↑⎕NPARTS 1⊃StatusFiles),'"'
      cfg,←' APLCORENAME="',xin,'APLCORE_',step,'."'
     
      :If 0=⎕NC'APLProcess' ⋄ ⎕SE.SALT.Load _FindCITA,'APLProcess' ⋄ :EndIf
      cpu←⎕AI[3]
      Fullname←∊1 ⎕NPARTS xin,file
      :Select ext←⎕C 3⊃⎕NPARTS file
      :CaseList '.aplf' '.aplc' '.apln'
          :If V≥18
              cmd←'LOAD="',Fullname,'"'
          :Else
              log←'Can not run "',file,'" on a version < 18'
              R←5
          :EndIf
      :Case '.dws' ⋄ dws←Fullname
      :Case '.dyalog' ⋄ cmd←'LX="⎕SE.UCMD''xx←Load ''''',Fullname,''''''' ⋄ ⍎{9≠⎕nc ⍵: ⍵,'' ⍬'' ⋄ ⍵,''.Run ⍬''}xx"'
      :CaseList '' '.dyalogtest'
          R←4('.dyalogtest or folder-argument only valid for "test", not "',step,'"') ⋄ →(step≢'test')/EndJob
          :If ext≡'' ⋄ :AndIf 1≠1 ⎕NINFO Fullname ⋄ R←4 ⋄ →EndJob ⋄ :EndIf  ⍝ no extension, but does not refer to a folder
          TestLog←xin,'CITA_',(2⊃⎕NPARTS(-(ext≡''))↓Fullname),'.log'
          ⍝cmd←'lx="⎕SE.UCMD''output.Find on -includequadoutput'' ⋄ ⎕SE.UCMD''DTest ',Fullname,' -off -testlog=',TestLog,' ',(specs{6::'' ⋄ ⍺⍎⍵}'DTestArgs'),'''"'
          cmd←'LX="',(⎕UCS 253),'SE.UCMD''DTest ''''',Fullname,''''' -off -testlog=''''',TestLog,''''' ',(specs{6::'' ⋄ ⍺⍎⍵}'dtestmodifiers'),'''"'
          isDTest←1
      :Else
          R←4('Did not recognize type of file "',file,'"') ⋄ →EndJob
      :EndSelect
      cmd,←' ',cfg
      ⎕←(⎕UCS 13),'Executing APLProcess with cmdline ',cmd,' in dir ',xin
      exited←¯1
      proc←⎕NEW APLProcess(dws cmd interpreter.exe'' ''xin)
      ai3←⎕AI[3]
      :While ~proc.IsRunning proc.Proc.Id ⋄ ai3←⎕AI[3] ⋄ :EndWhile   ⍝ wait until process has started
      :Repeat
          ⎕DL 1⌊specs.secondstimeout×1000  ⍝ delay one second by default, but allow smaller (if someone challenges our timeouts...)
      :Until (ai31←⎕AI[3])≥⌊ai3+specs.secondstimeout×1000
      :OrIf exited←proc.HasExited
     
      :If 0=⎕NC'exited'
      :OrIf exited∊0 ¯1   ⍝ TIMEOUT
          log←'Process did not complete within ',(1⍕0.001×⎕AI[3]-ai3),' seconds and was killed (SecondsTimeout=',(⍕specs.secondstimeout),((specs.secondstimeout=Timeout)/' default value'),')'
          {}proc.Kill
          R←2 ⋄ →EndJob
      :EndIf
      :If isDTest
         ⍝ how to determine success or failure? (On Windows we could use prod.GetExitCode, but that won't be general enough for CITA)
          :If ⎕NEXISTS TestLog  ⍝ logfile was created → tests failed!
              ''⎕NPUT 1⊃StatusFiles
              log←']DTest created a logfile ("',TestLog,'") indicating failed tests. Details in that file'
              R←1
          :Else               ⍝ absence of log indicates success
              (⊂'')⎕NPUT 2⊃StatusFiles
              R←0
          :EndIf
          →EndJob
      :EndIf
      :If ⎕NEXISTS 2⊃StatusFiles ⋄ R←0 ⋄ →EndJob ⋄ :EndIf
      :If ⎕NEXISTS 1⊃StatusFiles ⋄ log←'Test created logfile "',(1⊃StatusFiles),'" to indicate failed tests. More info might be found in the APL Session-log "',log_file,'"' ⋄ R←1 ⋄ →EndJob ⋄ :EndIf
      R←3
     
     EndJob:
     EOF:
    ∇

    ∇ (rc rspec log)←_GetTestSpecs fl;cnt;specs;spec
      :Trap rc←0
          log←''
          cnt←0
          rspec←⍬
     
          specs←_FoldJson 1⊃⎕NGET fl
          specs.(defaults{(⊂⍺ ⍵){(s t)←⍺ ⋄ 0=t.⎕NC ⍵:⍎'t.',⍵,'←s.',⍵}¨⍺.⎕NL-2}¨tests)    ⍝ Apply defaults to all tests
     
          ⍝ and make sure we have something in Test (will be validated later)
          :For spec :In specs.tests
            ⍝ set defaults for optional entries Setip/Teardown
              spec←(⊂'setup'){0=⍵.⎕NC ⍺:⍵⊣⍵⍎⍺,'←''''' ⋄ ⍵}¨spec
              spec←(⊂'teardown'){0=⍵.⎕NC ⍺:⍵⊣⍵⍎⍺,'←''''' ⋄ ⍵}¨spec
              spec.secondstimeout←spec{6::⍵ ⋄ ⍺.secondstimeout}Timeout
     
              cnt+←1
              spec.id←spec{6::⍵ ⋄ ⍺⍎'id'}'#',⍕cnt
              rspec,←spec
          :EndFor
          :If rspec≡⍬ ⋄ rc←705 ⋄ →0 ⋄ :EndIf
      :Else
          rc←701 ⋄ log←⊂'Error reading "',fl,'":',nl,⎕JSON ⎕DMX
      :EndTrap
      rc←0
    ∇



    ∇ R←to _CopyFolder from;hf;n;t;h
    ⍝ can't use ⎕NCOPY because that would also copy hidden files/directories - which would really hurt in the case of ".git"
    ⍝ R is returncode. Values: 0=ok
    ⍝                          1=problems copying file
    ⍝                          2=problems creating a folder
      R←0
      from←∊1 ⎕NPARTS from ⍝ normalize it
      hf←⍬
      :For (n t h) :In ↓[1]↑0 1 6(⎕NINFO⍠('Wildcard' 1)('Recurse' 1))(from,'/*')   ⍝ get name, type & hidden-status
          hf,←(h∧t=1)/⊂n ⍝ collect step of hidden directories
          :If h=1 ⋄ :Continue ⋄ :EndIf
          :If 0<≢hf ⋄ :AndIf 1∊hf{⍺≡(≢⍺)↑⍵}¨⊂n ⋄ :Continue ⋄ :EndIf ⍝ file from a hidden folder
          :If 1=t  ⍝ directory
              :If from≡(≢from)↑n
                  :Trap 0
                      3 ⎕MKDIR to,(≢from)↓n ⋄ :Continue
                  :Else
                      →0⊣R←2
                  :EndTrap
              :Else
                  ⎕←'Paranoia justified!'
                  ∘∘∘
              :EndIf
          :Else
              :If 1≠(to,(≢from)↓n)⎕NCOPY n
                  →0⊣R←1
              :EndIf
          :EndIf
      :EndFor
      R←0
    ∇

    ∇ R←_FindCITA
    ⍝ I had expected this would turn out to be more complicated...
    ⍝ but doing it this way we don't even need the environment variable!
      :If 3=⎕SE.⎕NC'CITA._getArg'
      :AndIf 0<≢R←4⊃5179⌶'⎕SE.CITA._getArg'      ⍝ default (and preferred) approach
          R←1⊃⎕NPARTS R
      :ElseIf 0<≢R←4⊃5179⌶⎕SE.CITA.API  ⍝ also acceptable...
          R←1⊃⎕NPARTS R
      :ElseIf 2=##.⎕NC't'   ⍝ during List
          R←∊1 ⎕NPARTS(##.t~'"'),'/../../../StartupSession/CITA'
      :ElseIf 2=##.##.⎕NC't'   ⍝ saw that stack as well during spc.List
          R←∊1 ⎕NPARTS(##.##.t~'"'),'/../../../StartupSession/CITA'
      :Else  ⍝ take out before going into production...
          600⌶1
          ∘∘∘
          600⌶0
      :EndIf
    ∇

      _FoldJson←{
          Apl←0 ⎕JSON⍠'Dialect' 'JSON5'⊢
          Json←1 ⎕JSON⍠'Compact' 0⊢
          FoldMembers←'^.*[^\\]":'⎕R{':',⍨Json ⎕C Apl ¯1↓⍵.Match}
          Apl FoldMembers Json Apl ⍵
      }
    :endsection
:endnamespace
